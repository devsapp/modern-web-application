edition: 1.0.0 #  命令行YAML规范版本，遵循语义化版本（Semantic Versioning）规范
name: modern-web-application #  项目名称
access: '{{access}}'  #访问秘钥别名
vars: # [全局变量，提供给各个服务使用]
  domain: '{{domain}}'
  region: cn-hongkong
  indexFile: index.html
  gateway:
    groupName: serverlessdevs # apigateway 的分组名
  fc: 
    baseUrl:  '' #函数计算触发器地址，可以在部署好函数之后获得。例子： https://xxx.cn-hongkong.fc.aliyuncs.com/2016-08-15/proxy/serverlesshub/serverlesshub/
  oss:
    bucketName: '{{bucketName}}' 
    bucketObject: web  #指定子目录
services:
  www: # 静态资源
    component: oss
    # actions:
    #   pre-deploy:
    #     - run: npm install
    #       path: ./www
    #     - run: npm run build
    #       path: ./www
    props:
      region: ${vars.region}
      bucket: ${vars.oss.bucketName} # OSS bucket 自动生成
      subDir: ${vars.oss.bucketObject}
      acl: public-read # 读写权限
      codeUri: ./www/build # 指定本地要上传目录文件地址
      website: # OSS 静态网站配置
        index: index.html # 默认首页
        error: 404.html # 默认 404 页
        subDirType: redirect # 子目录首页 404 规则
      customDomains: # OSS 绑定域名
        - domainName: auto
          protocol: HTTP
  apis: #动态api
    component: fc # 组件名称
    actions:
      pre-deploy:
        - run: npm install
          path: ./apis
    props:
      region: ${vars.region}
      service:
        name: serverlesshub
        description: serverless应用市场
        internetAccess: true
      function:
        name: serverlesshub
        description: serverless应用市场的函数
        runtime: nodejs12
        codeUri: ./apis
        handler: index.handler
        memorySize: 128
        timeout: 10
      triggers:
        - name: httpTrigger
          type: http
          config:
            authType: anonymous
            methods:
              - GET
              - POST
      customDomains:
        - domainName: auto
          protocol: HTTP
          routeConfigs:
            - path: /*
  gateway: #  服务名称
    component: apigateway # 这里引入的是相对路径，正式配置替换成你自己的component名称即可
    props:
      regionId: ${vars.region}
      customerDomain: ${vars.domain} # 客户自定义域名
      groupName: ${vars.gateway.groupName} #指定分组 这里你可以分开设置环境
      stageName: RELEASE
      apis:
        - apiName: portal_api # 访问网站post类型的api
          regionId: ${vars.region}
          requestConfig:
            requestPath: /api/*
            requestHttpMethod: ANY
          serviceConfig:
            servicePath: / # 后端路径
            serviceProtocol: FunctionCompute
            functionComputeConfig: # 函数计算的配置
              fcRegionId: ${vars.region} # 函数计算region
              fcBaseUrl: ${apis.output.url.system_url}
              onlyBusinessPath: true # 只接受路径
              path: /
              contentTypeCatagory: CLIENT
            resultType: JSON
        - apiName: portal_assets # 访问站点的静态资源
          regionId: ${vars.region}
          requestConfig:
            requestPath: /*
            requestProtocol: 'HTTP,HTTPS'
          serviceConfig:
            serviceProtocol: HTTP   # 协议类型
            serviceAddress: 'http://${www.output.Domains[0]}' # 后端服务地址
            servicePath: /${vars.oss.bucketObject}/* # 后端路径
  dns:  
    component: dns # 这里引入的是相对路径，正式配置替换成你自己的component名称即可
    actions:
      post-deploy:
        - run: s gateway bindDomain  #dns 挂载好 gateway的域名后，需要gateway再绑定一下
          path: ./
    props:
      domainName: ${vars.domain}
      value: ${gateway.output.domain} 